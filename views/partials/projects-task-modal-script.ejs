<script>
    document.addEventListener("DOMContentLoaded", function () {
        const tasks = document.getElementById("tasks");
        const tasksFirstCard = tasks.querySelector("a");
        const form = document.getElementById("task-form");
        const assignWorkerInput = document.getElementById("assign-worker");
        const assignWorkersList = document.getElementById("assign-workers-list");
        const submitButton = document.getElementById("submit-button");

        form.addEventListener("submit", event => {
            event.preventDefault(); // Prevent the default form submission

            submitButton.innerHTML = `
        <svg aria-hidden="true" role="status" class="inline w-4 h-4 me-3 text-white animate-spin" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="#E5E7EB"/>
            <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentColor"/>
        </svg>Loading...
    `

            const name = document.getElementById("name");
            const description = document.getElementById("description");

            axios.post(`/projects/<%= project.id %>/tasks/create`, {
                name: name.value,
                description: description.value,
                worker: assignWorkerInput.value
            }).then(res => {
                submitButton.innerHTML = "Create";
                name.value = "";
                description.value = "";
                assignWorkerInput.value = "";
                document.getElementById("hide-modal").click();
                tasks.insertBefore(createTaskCard(res.data), tasksFirstCard);
            }).catch(err => {
                console.error(err);
            });
        });

        assignWorkerInput.addEventListener("focus", () => {
            const workers = JSON.parse('<%-JSON.stringify(workers)%>');
            createUsersList(workers);
        });
        assignWorkerInput.addEventListener("blur", () => {
            assignWorkersList.innerHTML = null;
        });

        function createUsersList(users) {
            const ulElement = document.createElement("ul");
            ulElement.className = "h-full list-none list-inside dark:text-white";

            users.forEach((user, i) => {
                const liElement = document.createElement("li");
                liElement.addEventListener("mousedown", () => {
                    assignWorkerInput.value = user.id;
                });

                if (i !== users.length - 1) {
                    liElement.className = "p-4 border-b border-gray-400 hover:bg-gray-600 cursor-pointer";
                } else {
                    liElement.className = "p-4 hover:bg-gray-600 cursor-pointer";
                }
                liElement.textContent = `${user.first_name} ${user.last_name}`;
                ulElement.appendChild(liElement);
            });

            assignWorkersList.appendChild(ulElement);
        }
    });

    function createTaskCard(task) {
        // Create the anchor element
        const anchorElement = document.createElement("a");
        anchorElement.href = `/projects/${task.project_id}/tasks/${task.id}`;
        anchorElement.className = "block flex flex-col p-6 bg-white border border-gray-200 rounded-3xl hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700";

        // Create the heading element
        const headingElement = document.createElement("h5");
        headingElement.className = "mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white";
        headingElement.textContent = task.name;

        // Create the paragraph element for person information
        const personParagraph = document.createElement("p");
        personParagraph.className = "flex items-center gap-1 mb-8 font-normal text-base text-gray-700 dark:text-gray-400";

        // Create the span for the material-symbols-outlined icon
        const iconSpan = document.createElement("span");
        iconSpan.className = "material-symbols-outlined";
        iconSpan.textContent = "person";

        // Create the span for the person's first and last name
        const nameSpan = document.createElement("span");
        nameSpan.textContent = `${task.first_name} ${task.last_name}`;

        // Append the spans to the paragraph element
        personParagraph.appendChild(iconSpan);
        personParagraph.appendChild(nameSpan);

        // Create the div for progress information
        const progressDiv = document.createElement("div");
        progressDiv.className = "mt-auto";

        // Create the div for the progress text and percentage
        const progressTextDiv = document.createElement("div");
        progressTextDiv.className = "flex justify-between mb-1";

        // Create the span for "Progress" text
        const progressTextLabelSpan = document.createElement("span");
        progressTextLabelSpan.className = "text-base font-medium text-blue-700 dark:text-white";
        progressTextLabelSpan.textContent = "Progress";

        // Create the span for the progress percentage
        const progressPercentageSpan = document.createElement("span");
        progressPercentageSpan.className = "text-sm font-medium text-blue-700 dark:text-white";
        progressPercentageSpan.textContent = `${task.progress}%`;

        // Append the spans to the progress text div
        progressTextDiv.appendChild(progressTextLabelSpan);
        progressTextDiv.appendChild(progressPercentageSpan);

        // Create the div for the progress bar
        const progressBarDiv = document.createElement("div");
        progressBarDiv.className = "w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700";

        // Create the inner div for the progress bar with dynamic width
        const progressBarInnerDiv = document.createElement("div");
        progressBarInnerDiv.className = "bg-blue-600 h-2.5 rounded-full";
        progressBarInnerDiv.style.width = `${task.progress}%`;

        // Append the inner div to the progress bar div
        progressBarDiv.appendChild(progressBarInnerDiv);

        progressDiv.appendChild(progressTextDiv);
        progressDiv.appendChild(progressBarDiv);

        // Append the heading, person information, progress text, and progress bar to the anchor element
        anchorElement.appendChild(headingElement);
        anchorElement.appendChild(personParagraph);
        anchorElement.appendChild(progressDiv);

        // Append the anchor element to a parent container (replace "containerId" with the actual ID of your container)
        return anchorElement;
    }
</script>