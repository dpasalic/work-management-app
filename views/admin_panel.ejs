<!DOCTYPE html>
<html lang="en" class="dark">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel='stylesheet' href='/stylesheets/output.css' />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.3/axios.min.js"
        integrity="sha512-JWQFV6OCC2o2x8x46YrEeFEQtzoNV++r9im8O8stv91YwHNykzIS2TbvAlFdeH0GVlpnyd79W0ZGmffcRi++Bw=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <title>Admin Panel</title>
</head>

<body class="bg-slate-950 max-w-screen min-h-screen grid">
    <main class="w-full max-w-screen-xl mx-auto px-6 py-20">
        <h1 class="mb-10 text-4xl font-bold text-gray-900 dark:text-white">Admin Panel</h1>

        <div class="relative overflow-x-auto rounded-lg">
            <div class="pb-4">
                <label for="users-search" class="sr-only">Search</label>
                <div class="relative mt-1 flex items-center">
                    <div class="absolute inset-y-0 rtl:inset-r-0 start-0 flex items-center ps-3 pointer-events-none">
                        <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true"
                            xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
                        </svg>
                    </div>
                    <input type="text" id="users-search" name="users-search"
                        class="block pt-2 ps-10 text-sm text-gray-900 border border-gray-300 rounded-lg w-80 bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                        placeholder="Search for users">

                    <%- include ("partials/spinner.ejs") %>
                        <p id="msg" class="ml-auto text-green-400">
                            <%= msg %>
                        </p>
                </div>
            </div>
            <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
                <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                    <tr>
                        <th scope="col" class="px-6 py-3 rounded-tl-lg">
                            Id
                        </th>
                        <th scope="col" class="px-6 py-3">
                            First Name
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Last Name
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Email
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Role
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Edit
                        </th>
                        <th scope="col" class="px-6 py-3 rounded-tr-lg">
                            Delete
                        </th>
                    </tr>
                </thead>
                <tbody id="users-table-body"></tbody>
            </table>
            <div id="popup-modal" tabindex="-1"
                class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
                <div class="relative p-4 w-full max-w-md max-h-full">
                    <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
                        <button type="button"
                            class="absolute top-3 end-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"
                            data-modal-hide="popup-modal">
                            <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none"
                                viewBox="0 0 14 14">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
                                    stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                            </svg>
                            <span class="sr-only">Close modal</span>
                        </button>
                        <div class="p-4 md:p-5 text-center">
                            <svg class="mx-auto mb-4 text-gray-400 w-12 h-12 dark:text-gray-200" aria-hidden="true"
                                xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
                                    stroke-width="2" d="M10 11V6m0 8h.01M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                            </svg>
                            <h3 class="mb-5 text-lg font-normal text-gray-500 dark:text-gray-400">Are you sure you want
                                to delete this user?</h3>
                            <button onclick="deleteUser()" data-modal-hide="popup-modal" type="button"
                                class="text-white bg-red-600 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 dark:focus:ring-red-800 font-medium rounded-lg text-sm inline-flex items-center px-5 py-2.5 text-center me-2">
                                Delete
                            </button>
                            <button data-modal-hide="popup-modal" type="button"
                                class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600">
                                Cancel
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        const tableBody = document.getElementById('users-table-body');
        const users = JSON.parse('<%-JSON.stringify(users)%>');
        createTableBody(users);

        let id; // global variable which holds clicked user's id
        const spinner = document.getElementById("spinner");

        document.querySelectorAll(".delete-btn").forEach(btn => {
            btn.addEventListener("click", () => {
                id = btn.parentElement.parentElement.getAttribute("data-user-id");
            });
        });

        function deleteUser() {
            const msg = document.getElementById("msg");
            spinner.classList.remove("hidden");

            axios.delete(`/users/delete/${id}`)
                .then(res => {
                    if (res.status === 200) {
                        document.querySelector(`[data-user-id="${id}"]`).remove();
                        spinner.classList.add("hidden");
                        msg.innerHTML = "Deleted user successfully";
                    } else {
                        throw new Error("Internal Server Error");
                    }
                })
                .catch(err => console.log(err));
        }

        document.getElementById("users-search").addEventListener("input", e => {
            searchUsers(e.target.value);
        });
        function displaySearchedUsers(data, val) {
            if (!val) {
                tableBody.innerHTML = null;
                createTableBody(users);
            } else if (data.length === 0) {
                tableBody.innerHTML = "No users found matching your search criteria.";
            } else {
                tableBody.innerHTML = null;
                createTableBody(data);
            }
        }
        const searchUsers = debounce((val) => {
            if (!val) {
                displaySearchedUsers(users, val);
                return;
            }
            spinner.classList.remove("hidden");

            axios.get(`/users?q=${val}`)
                .then(res => {
                    displaySearchedUsers(res.data, val);
                    spinner.classList.add("hidden");
                })
                .catch(err => console.log(err));
        }, 500);
        function debounce(callback, delay) {
            let timer;
            return function (val) {
                clearTimeout(timer)
                timer = setTimeout(() => {
                    callback(val);
                }, delay)
            }
        }

        function createTableBody(users) {
            users.forEach(user => createTableRow(user));
        }

        function createTableRow(user) {
            const tr = document.createElement('tr');
            tr.className = 'bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600';
            tr.dataset.userId = user.id;

            const th = document.createElement('th');
            th.setAttribute('scope', 'row');
            th.className = 'px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white';
            th.textContent = user.id;

            const tdFirstName = createTd(user.first_name);

            const tdLastName = createTd(user.last_name ? user.last_name : '/');

            const tdEmail = createTd(user.email);

            const tdRole = createTd(user.role);

            const tdEditLink = document.createElement('td');
            tdEditLink.className = 'px-6 py-4';
            const link = document.createElement('a');
            link.href = `/users/${user.id}`;
            link.className = 'font-medium text-blue-600 dark:text-blue-500 hover:underline';
            link.textContent = "edit";
            tdEditLink.appendChild(link);

            const tdDeleteButton = createTd();
            const button = document.createElement('button');
            button.type = 'button';
            button.setAttribute('data-modal-target', 'popup-modal');
            button.setAttribute('data-modal-toggle', 'popup-modal');
            button.className = 'delete-btn font-medium text-blue-600 dark:text-blue-500 hover:underline';
            button.textContent = "delete";
            tdDeleteButton.appendChild(button);

            tr.appendChild(th);
            tr.appendChild(tdFirstName);
            tr.appendChild(tdLastName);
            tr.appendChild(tdEmail);
            tr.appendChild(tdRole);
            tr.appendChild(tdEditLink);
            tr.appendChild(tdDeleteButton);

            tableBody.appendChild(tr);

            function createTd(textContent = null) {
                const td = document.createElement('td');
                td.className = 'px-6 py-4';
                td.textContent = textContent;

                return td;
            }
        }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.js"></script>
</body>

</html>